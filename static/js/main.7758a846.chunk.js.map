{"version":3,"sources":["assets/pokerCards/40 - planning poker_Meterse en un berenjenal.svg","assets/pokerCards/xs - planning poker_When pigs fly.svg","assets/pokerCards/sm - planning poker_Don't put all.svg","assets/pokerCards/md - planning poker_Squeaking by.svg","assets/pokerCards/lg - planning poker_An arm and a leg.svg","assets/pokerCards/xl - planning poker_Low hanging fruit.svg","assets/pokerCards/xxl - planning poker_It ain't rocket science.svg","assets/pokerCards/planning poker_Eat a brownie.svg","store/reducers/polling.js","store/actions/types.js","store/reducers.js","store/index.js","config/index.js","layouts/DefaultLayout.jsx","store/actions/polling.js","layouts/AuthLayout.jsx","components/SessionSelection/JoinSession.jsx","components/SessionSelection/CreateSession.jsx","pages/SessionSelection/index.jsx","api/index.js","components/JoinSession/Form.jsx","pages/JoinSession/index.jsx","components/CreateSession/Form.jsx","pages/CreateSession/index.jsx","components/Polling/PollingLink.jsx","components/Polling/Members.jsx","components/Polling/Card.jsx","components/Polling/SelectedPolls.jsx","components/Polling/AvailablePolls.jsx","pages/Polling/index.jsx","App.jsx","serviceWorker.js","index.js","assets/pokerCards/0 - planning poker_Here be dragons.svg","assets/pokerCards/0.5 - planning poker_Coffee break.svg","assets/pokerCards/1 - planning poker_Low hanging fruit.svg","assets/pokerCards/5 - planning poker-Ornitorinco.svg","assets/pokerCards/8 - planning poker_An arm and a leg.svg","assets/pokerCards/20 - planning poker_Don't put all .svg","assets/pokerCards/100 - planning poker_Monster task.svg","assets/pokerCards/2 - planning poker_Piece of cake.svg","assets/pokerCards/101 - planning poker_When pigs fly.svg","assets/pokerCards/3 - planning poker_It ain't rocket science.svg","assets/pokerCards/13 - planning poker_Squeaking by.svg"],"names":["module","exports","initialState","pollType","sessionId","sessionName","userName","polls","reducer","state","action","type","combinedReducer","combineReducers","polling","rootReducer","storeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","getBaseUrl","url","DefaultLayout","PokerComponent","props","Navbar","bg","expand","Brand","href","className","Toggle","aria-controls","Container","setPollType","setSessionId","setSessionName","setUserName","setPolls","AuthLayout","Authentication","componentDidMount","match","path","Boolean","redirectToHome","location","replace","this","React","Component","Layout","connect","dispatch","Action","JoinSessionCard","history","useState","handleSessionId","Header","as","Body","src","alt","Form","onSubmit","event","preventDefault","push","Group","controlId","Control","required","placeholder","value","onChange","e","target","Button","variant","CreateSessionCard","setState","uuid","Row","Col","sm","getData","reactLocalStorage","getObject","saveSession","data","session","savedData","uuidData","payload","setObject","getSession","JoinSessionForm","handleUserName","API","card","Label","useEffect","params","CreateSessionForm","handleSessionName","creator","name","PollingLink","readOnly","MembersList","usersList","Array","isArray","length","map","i","ListGroup","Item","key","role","aria-label","CardMapping","Zero","Half","One","Two","Three","Five","Eight","Thirteen","Twenty","Fourty","Hundred","QuestionMark","xs","xsmall","s","small","m","medium","l","large","xl","xlarge","xxl","xxlarge","unknown","Card","label","handleClick","toString","onClick","defaultProps","SelectedPollSection","showCards","pollsList","poll","handlePolls","updatePolls","fetchPollData","useCallback","setTimeout","Members","SelectedPolls","find","AvailablePolls","hist","createBrowserHistory","App","basename","component","Polling","CreateSession","JoinSession","SessionSelection","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7758a846.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/40 - planning poker_Meterse en un berenjenal.71045c71.svg\";","module.exports = __webpack_public_path__ + \"static/media/xs - planning poker_When pigs fly.07fe1f89.svg\";","module.exports = __webpack_public_path__ + \"static/media/sm - planning poker_Don't put all.405c5c43.svg\";","module.exports = __webpack_public_path__ + \"static/media/md - planning poker_Squeaking by.d0768281.svg\";","module.exports = __webpack_public_path__ + \"static/media/lg - planning poker_An arm and a leg.6164385c.svg\";","module.exports = __webpack_public_path__ + \"static/media/xl - planning poker_Low hanging fruit.7a8b4030.svg\";","module.exports = __webpack_public_path__ + \"static/media/xxl - planning poker_It ain't rocket science.d0736c84.svg\";","module.exports = __webpack_public_path__ + \"static/media/planning poker_Eat a brownie.fc9a4c3e.svg\";","import {\n  SET_POLL_TYPE,\n  SET_SESSION_ID,\n  SET_SESSION_NAME,\n  SET_USER_NAME,\n  SET_POLLS,\n} from \"store/actions/types\";\n\nconst initialState = {\n  pollType: null,\n  sessionId: null,\n  sessionName: null,\n  userName: null,\n  polls: [],\n};\n\nfunction reducer(state = initialState, action) {\n  switch (action.type) {\n    case SET_POLL_TYPE:\n      state = { ...state, pollType: action.pollType };\n      break;\n    case SET_SESSION_ID:\n      state = { ...state, sessionId: action.sessionId };\n      break;\n    case SET_SESSION_NAME:\n      state = { ...state, sessionName: action.sessionName };\n      break;\n    case SET_USER_NAME:\n      state = { ...state, userName: action.userName };\n      break;\n    case SET_POLLS:\n      state = { ...state, polls: action.polls };\n      break;\n    default:\n  }\n  return state;\n}\n\nexport default reducer;\n","export const SET_POLL_TYPE = \"SET_POLL_TYPE\";\nexport const SET_SESSION_ID = \"SET_SESSION_ID\";\nexport const SET_SESSION_NAME = \"SET_SESSION_NAME\";\nexport const SET_USER_NAME = \"SET_USER_NAME\";\nexport const SET_POLLS = \"SET_POLLS\";\n","import { combineReducers } from \"redux\";\nimport polling from \"store/reducers/polling\";\n\nconst combinedReducer = combineReducers({ polling });\n\nconst rootReducer = (state, action) => {\n  return combinedReducer(state, action);\n};\n\nexport default rootReducer;\n","import { createStore, applyMiddleware, compose } from \"redux\";\nimport rootReducer from \"store/reducers\";\nimport thunk from \"redux-thunk\";\n\nconst storeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(rootReducer, storeEnhancers(applyMiddleware(thunk)));\n\nexport default store;\n","const domainPrefix = \"\";\n\nexport const getBaseUrl = (url) => `${domainPrefix}${url}`;\n","import React from \"react\";\nimport { Container, Navbar } from \"react-bootstrap\";\nimport { getBaseUrl } from \"config\";\n\nconst DefaultLayout = (PokerComponent) => {\n  return (props) => (\n    <>\n      <Navbar bg='dark' expand='lg'>\n        <Navbar.Brand href={getBaseUrl(\"/\")} className='text-light'>\n          Planning Poker\n        </Navbar.Brand>\n        <Navbar.Toggle aria-controls='basic-navbar-nav' />\n      </Navbar>\n      <Container className='h-100'>\n        <PokerComponent {...props} />\n      </Container>\n    </>\n  );\n};\n\nexport default DefaultLayout;\n","import {\n  SET_POLL_TYPE,\n  SET_SESSION_ID,\n  SET_USER_NAME,\n  SET_SESSION_NAME,\n  SET_POLLS,\n} from \"store/actions/types\";\n\n/**\n * action creators\n */\n\nexport const setPollType = (pollType) => {\n  return { type: SET_POLL_TYPE, pollType };\n};\n\nexport const setSessionId = (sessionId) => {\n  return { type: SET_SESSION_ID, sessionId };\n};\n\nexport const setSessionName = (sessionName) => {\n  return { type: SET_SESSION_NAME, sessionName };\n};\n\nexport const setUserName = (userName) => {\n  return { type: SET_USER_NAME, userName };\n};\n\nexport const setPolls = (polls) => {\n  return { type: SET_POLLS, polls };\n};\n","import React from \"react\";\nimport { connect } from \"react-redux\";\n// import * as API from \"api\";\nimport * as Action from \"store/actions/polling\";\nimport Layout from \"layouts/DefaultLayout\";\nimport { getBaseUrl } from \"config\";\n\nconst AuthLayout = (PokerComponent) => {\n  class Authentication extends React.Component {\n    componentDidMount = () => {\n      let { pollType, userName, sessionId } = this.props;\n      const { path } = this.props.match;\n      switch (path) {\n        case \"/create-session/:sessionId\":\n          break;\n        case \"/join-session/:sessionId\":\n          break;\n        case \"/polling/:sessionId\":\n          if (!(Boolean(userName) && Boolean(pollType) && Boolean(sessionId))) {\n            this.redirectToHome();\n          }\n          break;\n        default:\n      }\n    };\n    redirectToHome = () => {\n      window.location.replace(getBaseUrl(\"/\"));\n    };\n    render() {\n      return (\n        <>\n          <PokerComponent {...this.props} />\n        </>\n      );\n    }\n  }\n\n  const mapStateToProps = (state) => {\n    const { pollType, sessionId, sessionName, userName, polls } = state.polling;\n    return {\n      pollType,\n      sessionId,\n      sessionName,\n      userName,\n      polls,\n    };\n  };\n  const mapDispatchToProps = (dispatch) => {\n    const { setPollType, setPolls, setSessionId, setSessionName } = Action;\n    return { setPollType, setPolls, setSessionId, setSessionName };\n  };\n\n  return Layout(connect(mapStateToProps, mapDispatchToProps)(Authentication));\n};\n\nexport default AuthLayout;\n","import React, { useState } from \"react\";\nimport { Card, Button, Form } from \"react-bootstrap\";\nimport { getBaseUrl } from \"config\";\n\nconst JoinSessionCard = ({ history, setSessionId }) => {\n  const [sessionId, handleSessionId] = useState(\"\");\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    if (sessionId !== \"\") {\n      setSessionId(sessionId);\n      history.push(getBaseUrl(`/join-session/${sessionId}`));\n    }\n  };\n  return (\n    <Card>\n      <Card.Header as='h5' className='text-center'>\n        Join Session\n      </Card.Header>\n      <Card.Body className='text-center'>\n        <div className='d-block mb-2'>\n          <img src='http://via.placeholder.com/200x200' alt='join session' />\n        </div>\n        <Form onSubmit={handleSubmit}>\n          <Form.Group controlId='sessionId'>\n            <Form.Control\n              required\n              type='text'\n              placeholder='Enter Session ID'\n              className='text-center'\n              value={sessionId}\n              onChange={(e) => {\n                handleSessionId(e.target.value);\n              }}\n            />\n          </Form.Group>\n          <Button variant='primary' type='submit'>\n            Join\n          </Button>\n        </Form>\n      </Card.Body>\n    </Card>\n  );\n};\n\nexport default JoinSessionCard;\n","import React, { Component } from \"react\";\nimport uuid from \"uuid/v4\";\nimport { Card, Button, Form } from \"react-bootstrap\";\nimport { getBaseUrl } from \"config\";\n\nclass CreateSessionCard extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      pollType: \"fibnocci\",\n    };\n  }\n\n  onChange = (e) => {\n    const { value } = e.target;\n    this.setState({\n      pollType: value,\n    });\n  };\n\n  onSubmit = (e) => {\n    e.preventDefault();\n    const sessionId = uuid();\n    this.props.setPollType(this.state.pollType);\n    this.props.setSessionId(sessionId);\n    this.props.history.push(getBaseUrl(`/create-session/${sessionId}`));\n  };\n\n  render() {\n    const { pollType } = this.state;\n    return (\n      <Card className='text-center'>\n        <Card.Header as='h5'>Create Session</Card.Header>\n        <Card.Body>\n          <div className='d-block mb-2'>\n            <img\n              src='http://via.placeholder.com/200x200'\n              alt='create session'\n            />\n          </div>\n          <Form onSubmit={this.onSubmit}>\n            <Form.Group controlId='sessionId'>\n              <Form.Control\n                as='select'\n                onChange={this.onChange}\n                value={pollType}\n              >\n                <option value='fibnocci'>Fibonacci</option>\n                <option value='t-shirt'>T-Shirt</option>\n              </Form.Control>\n            </Form.Group>\n            <Button variant='primary' type='submit'>\n              Create\n            </Button>\n          </Form>\n        </Card.Body>\n      </Card>\n    );\n  }\n}\nexport default CreateSessionCard;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { setPollType, setSessionId } from \"store/actions/polling\";\nimport { Row, Col } from \"react-bootstrap\";\nimport JoinSessionCard from \"components/SessionSelection/JoinSession\";\nimport CreateSessionCard from \"components/SessionSelection/CreateSession\";\n\nconst SessionSelection = ({ history, setPollType, setSessionId }) => {\n  return (\n    <Row className='align-items-center h-100 mt-5'>\n      <Col sm='6'>\n        <CreateSessionCard\n          history={history}\n          setPollType={setPollType}\n          setSessionId={setSessionId}\n        />\n      </Col>\n      <Col sm='6 '>\n        <JoinSessionCard history={history} setSessionId={setSessionId} />\n      </Col>\n    </Row>\n  );\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    setPollType: (pollType) => dispatch(setPollType(pollType)),\n    setSessionId: (sessionId) => dispatch(setSessionId(sessionId)),\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(SessionSelection);\n","import map from \"lodash/map\";\nimport { reactLocalStorage } from \"reactjs-localstorage\";\n\nconst setData = (session) =>\n  reactLocalStorage.setObject(\"pokerSession\", session);\n\nconst getData = () => reactLocalStorage.getObject(\"pokerSession\");\n\nconst saveSession = (uuid, data) => {\n  const savedData = getData();\n  let uuidData = savedData && savedData[uuid] ? savedData[uuid] : {};\n  const payload = {\n    ...savedData,\n    [uuid]: {\n      ...uuidData,\n      ...data,\n    },\n  };\n  setData(payload);\n};\n\nexport const getSession = (uuid) => {\n  const savedData = getData();\n  return savedData && savedData[uuid] ? savedData[uuid] : null;\n};\n\nexport const createSession = (userName, sessionName, sessionId, pollType) => {\n  saveSession(sessionId, {\n    creator: userName,\n    sessionName,\n    pollType,\n    polls: [{ userName, card: \"\" }],\n  });\n};\n\nexport const joinSession = (userName, sessionId) => {\n  const session = getSession(sessionId);\n  const data = {\n    ...session,\n    polls: [...session.polls, { userName, card: \"\" }],\n  };\n  saveSession(sessionId, data);\n};\n\nexport const pollToSession = (userName, sessionId, card) => {\n  const session = getSession(sessionId);\n  const polls = map(session.polls, (poll) => {\n    if (poll.userName === userName) {\n      return {\n        ...poll,\n        card,\n      };\n    }\n    return poll;\n  });\n  const data = {\n    ...session,\n    polls,\n  };\n  saveSession(sessionId, data);\n};\n","import React, { useState } from \"react\";\nimport { Card, Button, Form } from \"react-bootstrap\";\nimport { getBaseUrl } from \"config\";\nimport * as API from \"api\";\n\nconst JoinSessionForm = ({\n  history,\n  sessionId,\n  setUserName,\n  setSessionName,\n  setPollType,\n}) => {\n  const [userName, handleUserName] = useState(\"\");\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    if (userName !== \"\") {\n      const session = API.getSession(sessionId);\n      setUserName(userName);\n      setSessionName(session.sessionName);\n      setPollType(session.pollType);\n      API.joinSession(userName, sessionId);\n      history.push(getBaseUrl(`/polling/${sessionId}`));\n    }\n  };\n  return (\n    <Card className='text-center '>\n      <Card.Header as='h5'>Join Session</Card.Header>\n      <Card.Body>\n        <Form onSubmit={handleSubmit}>\n          <Form.Group controlId='formBasicEmail'>\n            <Form.Label>Your Name</Form.Label>\n            <Form.Control\n              required\n              type='text'\n              placeholder='Enter your name'\n              className='text-center'\n              value={userName}\n              onChange={(event) => handleUserName(event.target.value)}\n            />\n          </Form.Group>\n          <Button variant='primary' type='submit'>\n            Join\n          </Button>\n        </Form>\n      </Card.Body>\n    </Card>\n  );\n};\nexport default JoinSessionForm;\n","import React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Row, Col } from \"react-bootstrap\";\nimport {\n  setUserName,\n  setSessionName,\n  setPollType,\n  setSessionId,\n} from \"store/actions/polling\";\nimport JoinSessionForm from \"components/JoinSession/Form\";\n\n/**\n * @todo if user refresh the join session page then whole data flush from redux store\n * and the data captured in previous form lost. So to handle this case, we need to store the data\n * in database through backend application.\n *\n */\nconst JoinSession = ({\n  history,\n  match,\n  setSessionId,\n  setUserName,\n  setSessionName,\n  setPollType,\n}) => {\n  useEffect(() => {\n    setSessionId(match.params.sessionId);\n  }, [match.params.sessionId, setSessionId]);\n  return (\n    <Row className='align-items-center h-100 mt-5'>\n      <Col sm='6' className='mx-auto'>\n        <JoinSessionForm\n          history={history}\n          setUserName={setUserName}\n          setSessionName={setSessionName}\n          setPollType={setPollType}\n          sessionId={match.params.sessionId}\n        />\n      </Col>\n    </Row>\n  );\n};\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    setUserName: (userName) => dispatch(setUserName(userName)),\n    setSessionId: (sessionId) => dispatch(setSessionId(sessionId)),\n    setSessionName: (sessionName) => dispatch(setSessionName(sessionName)),\n    setPollType: (pollType) => dispatch(setPollType(pollType)),\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(JoinSession);\n","import React, { useState } from \"react\";\nimport { Card, Button, Form } from \"react-bootstrap\";\nimport { getBaseUrl } from \"config\";\nimport * as API from \"api\";\n\nconst CreateSessionForm = ({\n  history,\n  sessionId,\n  setUserName,\n  setSessionName,\n  pollType,\n}) => {\n  const [sessionName, handleSessionName] = useState(\"\");\n  const [userName, handleUserName] = useState(\"\");\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    if (sessionName !== \"\" && userName !== \"\") {\n      setUserName(userName);\n      setSessionName(sessionName);\n      API.createSession(userName, sessionName, sessionId, pollType);\n      history.push(getBaseUrl(`/polling/${sessionId}`));\n    }\n  };\n\n  return (\n    <Card className='text-center '>\n      <Card.Header as='h5'>Start New Session</Card.Header>\n      <Card.Body>\n        <Form onSubmit={handleSubmit}>\n          <Form.Group controlId='formBasicEmail'>\n            <Form.Label>Session Name</Form.Label>\n            <Form.Control\n              required\n              type='text'\n              name='sessionName'\n              placeholder='Enter Session name'\n              className='text-center'\n              value={sessionName}\n              onChange={(event) => handleSessionName(event.target.value)}\n            />\n          </Form.Group>\n          <Form.Group controlId='formBasicEmail'>\n            <Form.Label>Your Name</Form.Label>\n            <Form.Control\n              required\n              type='text'\n              name='userName'\n              placeholder='Enter your name'\n              className='text-center'\n              value={userName}\n              onChange={(event) => handleUserName(event.target.value)}\n            />\n          </Form.Group>\n          <Button variant='primary' type='submit'>\n            Join\n          </Button>\n        </Form>\n      </Card.Body>\n    </Card>\n  );\n};\nexport default CreateSessionForm;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Row, Col } from \"react-bootstrap\";\nimport { setSessionName, setUserName } from \"store/actions/polling\";\nimport CreateSessionForm from \"components/CreateSession/Form\";\n\nconst CreateSession = ({\n  history,\n  match,\n  pollType,\n  setSessionName,\n  setUserName,\n}) => {\n  return (\n    <Row className='align-items-center h-100 mt-5'>\n      <Col sm='6' className='mx-auto'>\n        <CreateSessionForm\n          history={history}\n          pollType={pollType}\n          sessionId={match.params.sessionId}\n          setSessionName={setSessionName}\n          setUserName={setUserName}\n        />\n      </Col>\n    </Row>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    pollType: state.polling.pollType,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    setSessionName: (sessionName) => dispatch(setSessionName(sessionName)),\n    setUserName: (userName) => dispatch(setUserName(userName)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CreateSession);\n","import React from \"react\";\nimport { Form } from \"react-bootstrap\";\n\nconst PollingLink = ({ sessionId }) => {\n  return (\n    <Form>\n      <Form.Group controlId='pollingLink'>\n        <Form.Control\n          type='text'\n          name='pollingLink'\n          placeholder='Polling Link'\n          className='text-center'\n          readOnly={true}\n          value={`https://ahsan-bilal-786.github.io/poker/join-session/${\n            sessionId ? sessionId : \"\"\n          }`}\n        />\n      </Form.Group>\n    </Form>\n  );\n};\n\nexport default PollingLink;\n","import React from \"react\";\nimport { Card, ListGroup } from \"react-bootstrap\";\n\nconst MembersList = ({ polls }) => {\n  let usersList = [];\n  if (Array.isArray(polls) && polls.length > 0)\n    usersList = polls.map(({ userName, card }, i) => {\n      return (\n        <ListGroup.Item key={i}>\n          {card === \"\" ? (\n            <span\n              className='text-warning mr-2'\n              role='img'\n              aria-label='exclamation'\n            >\n              &#10069;\n            </span>\n          ) : (\n            <span className='text-success mr-2' role='img' aria-label='tick'>\n              &#10004;\n            </span>\n          )}\n          {userName}\n        </ListGroup.Item>\n      );\n    });\n  return (\n    <Card>\n      <Card.Header as='h5' className='text-center'>\n        Members\n      </Card.Header>\n      <Card.Body className='p-0 members-list'>\n        <ListGroup variant='flush'>{usersList}</ListGroup>\n      </Card.Body>\n    </Card>\n  );\n};\n\nexport default MembersList;\n","import React from \"react\";\nimport { Card as BSCard, Col } from \"react-bootstrap\";\nimport Zero from \"assets/pokerCards/0 - planning poker_Here be dragons.svg\";\nimport Half from \"assets/pokerCards/0.5 - planning poker_Coffee break.svg\";\nimport One from \"assets/pokerCards/1 - planning poker_Low hanging fruit.svg\";\nimport Five from \"assets/pokerCards/5 - planning poker-Ornitorinco.svg\";\nimport Eight from \"assets/pokerCards/8 - planning poker_An arm and a leg.svg\";\nimport Twenty from \"assets/pokerCards/20 - planning poker_Don't put all .svg\";\nimport Hundred from \"assets/pokerCards/100 - planning poker_Monster task.svg\";\nimport Two from \"assets/pokerCards/2 - planning poker_Piece of cake.svg\";\nimport QuestionMark from \"assets/pokerCards/101 - planning poker_When pigs fly.svg\";\nimport Three from \"assets/pokerCards/3 - planning poker_It ain't rocket science.svg\";\nimport Thirteen from \"assets/pokerCards/13 - planning poker_Squeaking by.svg\";\nimport Fourty from \"assets/pokerCards/40 - planning poker_Meterse en un berenjenal.svg\";\nimport xsmall from \"assets/pokerCards/xs - planning poker_When pigs fly.svg\";\nimport small from \"assets/pokerCards/sm - planning poker_Don't put all.svg\";\nimport medium from \"assets/pokerCards/md - planning poker_Squeaking by.svg\";\nimport large from \"assets/pokerCards/lg - planning poker_An arm and a leg.svg\";\nimport xlarge from \"assets/pokerCards/xl - planning poker_Low hanging fruit.svg\";\nimport xxlarge from \"assets/pokerCards/xxl - planning poker_It ain't rocket science.svg\";\nimport unknown from \"assets/pokerCards/planning poker_Eat a brownie.svg\";\n\nconst CardMapping = {\n  \"0\": Zero,\n  \"0.5\": Half,\n  \"1\": One,\n  \"2\": Two,\n  \"3\": Three,\n  \"5\": Five,\n  \"8\": Eight,\n  \"13\": Thirteen,\n  \"20\": Twenty,\n  \"40\": Fourty,\n  \"100\": Hundred,\n  \"?\": QuestionMark,\n  xs: xsmall,\n  s: small,\n  m: medium,\n  l: large,\n  xl: xlarge,\n  xxl: xxlarge,\n  unknown: unknown,\n};\n\nconst Card = ({ value, label, handleClick }) => {\n  if (value && CardMapping[value.toString()])\n    return (\n      <Col sm='2' className='text-center mb-2'>\n        <BSCard className='bg-transparent border-0 text-light'>\n          <BSCard.Body\n            className='p-0 cursor-pointer'\n            onClick={() => handleClick(value)}\n          >\n            {label !== \"\" && (\n              <p className='text-light mb-0 font-weight-bold'>{label}</p>\n            )}\n            <img src={CardMapping[value]} alt='value' className='rounded' />\n          </BSCard.Body>\n        </BSCard>\n      </Col>\n    );\n  else return <></>;\n};\n\nCard.defaultProps = {\n  label: \"\",\n  handleClick: (value) => {},\n};\nexport default Card;\n","import React from \"react\";\nimport { Row } from \"react-bootstrap\";\nimport Card from \"components/Polling/Card\";\n\nconst SelectedPollSection = ({ polls, showCards }) => {\n  let pollsList = [];\n  if (Array.isArray(polls) && polls.length > 0)\n    pollsList = polls.map((poll, i) => {\n      return (\n        <Card\n          key={i}\n          value={showCards ? poll.card : \"unknown\"}\n          label={poll.userName}\n        />\n      );\n    });\n  return (\n    <Row className='border rounded bg-secondary px-2 py-3 mb-2'>\n      {pollsList}\n    </Row>\n  );\n};\n\nexport default SelectedPollSection;\n","import React from \"react\";\nimport { Row } from \"react-bootstrap\";\nimport Card from \"components/Polling/Card\";\n\nconst SelectedPollSection = ({ pollType, setPolls }) => {\n  return (\n    <Row className='border rounded px-2 py-3'>\n      {pollType === \"fibnocci\" && (\n        <>\n          <Card value='0' handleClick={setPolls} />\n          <Card value='0.5' handleClick={setPolls} />\n          <Card value='1' handleClick={setPolls} />\n          <Card value='2' handleClick={setPolls} />\n          <Card value='3' handleClick={setPolls} />\n          <Card value='5' handleClick={setPolls} />\n          <Card value='8' handleClick={setPolls} />\n          <Card value='13' handleClick={setPolls} />\n          <Card value='20' handleClick={setPolls} />\n          <Card value='40' handleClick={setPolls} />\n          <Card value='100' handleClick={setPolls} />\n          <Card value='?' handleClick={setPolls} />\n        </>\n      )}\n      {pollType === \"t-shirt\" && (\n        <>\n          <Card value='xs' handleClick={setPolls} />\n          <Card value='sm' handleClick={setPolls} />\n          <Card value='m' handleClick={setPolls} />\n          <Card value='l' handleClick={setPolls} />\n          <Card value='xl' handleClick={setPolls} />\n          <Card value='xxl' handleClick={setPolls} />\n        </>\n      )}\n    </Row>\n  );\n};\n\nexport default SelectedPollSection;\n","import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Row, Col } from \"react-bootstrap\";\nimport { setPolls } from \"store/actions/polling\";\nimport * as API from \"api\";\nimport PollingLink from \"components/Polling/PollingLink\";\nimport Members from \"components/Polling/Members\";\nimport SelectedPolls from \"components/Polling/SelectedPolls\";\nimport AvailablePolls from \"components/Polling/AvailablePolls\";\nimport { useCallback } from \"react\";\n\nconst Polling = ({ pollType, userName, sessionId, sessionName }) => {\n  const [polls, handlePolls] = useState([]);\n\n  const handleCardSelection = (card) => {\n    API.pollToSession(userName, sessionId, card);\n    updatePolls(sessionId);\n  };\n\n  const updatePolls = (sessionId) => {\n    if (sessionId) {\n      const session = API.getSession(sessionId);\n      handlePolls(session.polls);\n    }\n  };\n\n  const fetchPollData = useCallback(() => {\n    setTimeout(() => {\n      updatePolls(sessionId);\n      fetchPollData();\n    }, 500);\n  }, [sessionId]);\n\n  useEffect(() => {\n    if (!(Array.isArray(polls) && polls.length > 0)) fetchPollData();\n  });\n\n  const showAllRecords = () => {\n    if (Array.isArray(polls) && polls.length > 0) {\n      const poll = polls.find((poll) => poll.userName === userName);\n      return poll.card !== \"\" ? true : false;\n    }\n    return false;\n  };\n\n  return (\n    <>\n      <Row className='justify-content-between h-100 mt-5'>\n        <Col sm='4' className='ml-1'>\n          <h4 className='pt-2'>{sessionName}</h4>\n        </Col>\n        <Col sm='4'>\n          <PollingLink sessionId={sessionId} />\n        </Col>\n      </Row>\n      <Row className='h-100 mt-2'>\n        <Col sm='3'>\n          <Members polls={polls} />\n        </Col>\n        <Col sm='9'>\n          <SelectedPolls polls={polls} showCards={showAllRecords()} />\n          <AvailablePolls pollType={pollType} setPolls={handleCardSelection} />\n        </Col>\n      </Row>\n    </>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  const { pollType, userName, sessionId, polls, sessionName } = state.polling;\n  return {\n    pollType,\n    userName,\n    sessionName,\n    sessionId,\n    polls,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    setPolls: (polls) => dispatch(setPolls(polls)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Polling);\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport store from \"store/index\";\nimport { getBaseUrl } from \"config\";\nimport createBrowserHistory from \"history/createBrowserHistory\";\nimport { Router, Switch, Route } from \"react-router-dom\";\nimport DefaultLayout from \"layouts/DefaultLayout\";\nimport AuthLayout from \"layouts/AuthLayout\";\nimport SessionSelection from \"pages/SessionSelection\";\nimport JoinSession from \"pages/JoinSession\";\nimport CreateSession from \"pages/CreateSession\";\nimport Polling from \"pages/Polling\";\nimport \"./App.css\";\n\nconst hist = createBrowserHistory();\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Router\n        history={hist}\n        basename={\"http://ahsan-bilal-786.github.io/poker\"}\n      >\n        <Switch>\n          <Route\n            path={getBaseUrl(\"/polling/:sessionId\")}\n            component={AuthLayout(Polling)}\n          />\n          <Route\n            path={getBaseUrl(\"/create-session/:sessionId\")}\n            component={AuthLayout(CreateSession)}\n          />\n          <Route\n            path={getBaseUrl(\"/join-session/:sessionId\")}\n            component={DefaultLayout(JoinSession)}\n          />\n          <Route path='/' component={DefaultLayout(SessionSelection)} />\n        </Switch>\n      </Router>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"bootstrap/js/dist/util\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/0 - planning poker_Here be dragons.ed7886ec.svg\";","module.exports = __webpack_public_path__ + \"static/media/0.5 - planning poker_Coffee break.564830eb.svg\";","module.exports = __webpack_public_path__ + \"static/media/1 - planning poker_Low hanging fruit.1c7bf067.svg\";","module.exports = __webpack_public_path__ + \"static/media/5 - planning poker-Ornitorinco.c42e9a40.svg\";","module.exports = __webpack_public_path__ + \"static/media/8 - planning poker_An arm and a leg.e7cdcc87.svg\";","module.exports = __webpack_public_path__ + \"static/media/20 - planning poker_Don't put all .2db23d77.svg\";","module.exports = __webpack_public_path__ + \"static/media/100 - planning poker_Monster task.ef2886c5.svg\";","module.exports = __webpack_public_path__ + \"static/media/2 - planning poker_Piece of cake.5ff0669a.svg\";","module.exports = __webpack_public_path__ + \"static/media/101 - planning poker_When pigs fly.2ef1fb74.svg\";","module.exports = __webpack_public_path__ + \"static/media/3 - planning poker_It ain't rocket science.d4128a50.svg\";","module.exports = __webpack_public_path__ + \"static/media/13 - planning poker_Squeaking by.16839e43.svg\";"],"sourceRoot":""}